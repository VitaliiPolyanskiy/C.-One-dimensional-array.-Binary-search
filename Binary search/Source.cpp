#include <iostream>

using namespace std;

int main()
{
	// Алгоритм бинарного поиска применим только к отсортированным данным.
	// Суть алгоритма заключается в том, что на каждой итерации вычисляется граница диапазона 
	// массива, в котором может быть найдено искомое значение, и середина. Затем, происходит 
	// сравнение искомого значения с серединой. По результатам сравнения меняется левая или правая 
	// граница.

	// Чем больше объем данных, в которых производится поиск, тем больше заметен выигрыш бинарного 
	// поиска перед линейным.

	// Определение размера массива.
	const int nSize = 11;

	// Инициализация массива.
	int ar[nSize] = { 1, 7, 9, 15, 25, 36, 41, 58, 69, 75, 90 };

	// Объявление переменной, которая содержит искомое значение.
	int nKey = 15;

	// Объявление переменной, которая будет содержать индекс найденного элемента. Если индекс будет 
	// равен -1, то искомое значение в массиве не найдено.
	int nIndex = -1;

	// Объявление переменной, которая содержит нижнюю границу диапазона поиска.
	int nLow = 0;

	// Объявление переменной, которая содержит верхнюю границу диапазона поиска.
	int nHigh = nSize - 1;

	// Объявление переменной, которая содержит индекс середины диапазона поиска.
	int nMiddle = 0;

	// Цикл, который будет перебирать значения в выбранном диапазоне до тех пор, пока нижняя граница
	// меньше либо равна верхней.
	while (nLow <= nHigh)
	{
		// Вычисляем индекс середины диапазона.
		nMiddle = (nLow + nHigh) / 2;

		// Если значение, находящееся в середине диапазона равно искомому.
		if (nKey == ar[nMiddle])
		{
			nIndex = nMiddle; // Запоминаем текущую позицию массива.
			break; // Прерываем цикл.
		}

		// Если искомое значение больше значения, находящегося в середине диапазона.
		if (nKey > ar[nMiddle])
		{
			nLow = nMiddle + 1; // Сдвигаем нижнюю границу.
		}
		else
		{
			nHigh = nMiddle - 1; // Сдвигаем верхнюю границу.
		}
	}

	// Если индекс, по-прежнему, равен -1, то совпадений не найдено.
	if (nIndex == -1)
	{
		cout << "No matches found." << endl;
	}
	else
	{
		cout << "Match found at " << nIndex << " index." << endl;
	}

	return 0;
}